# -*- coding: utf-8 -*-
"""readligo_tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jjwk1_1nHXW8ZXM2Z3nFfKxBjAVDB58y
"""

import numpy as np
import matplotlib.pyplot as plt
import h5py

filename = 'H-H1_LOSC_4_V1-1126076416-4096.hdf5'
dataFile = h5py.File(filename,'r')

meta = dataFile['meta']
gpsStart = meta['GPSstart'].value
duration = meta['Duration'].value
gpsEnd = gpsStart + duration

strainC00 = dataFile['strain']['Strain'].value
ts = dataFile['strain']['Strain'].attrs['Xspacing']

time = np.arange(gpsStart,gpsEnd,ts)

numSamples = 1000

plt.plot(time[0:numSamples],strainC00[0:numSamples],color = 'b')
plt.xlabel('GPS Time(s)')
plt.ylabel('H1 strain , 4096Hz,GW170817')
plt.show()

dataFile.keys()
print dataFile['meta'].keys()
print dataFile['meta']['Detector'].value

import numpy as np
import matplotlib.pyplot as plt
import readligo as rl
start= 1126076416
stop = 1126077416
seglist = rl.getsegs(start,stop,'H1',flag = 'BURST_CAT2')
print seglist
N = 10000
for (begin,end) in seglist:
    strain,meta,chan_dict = rl.getstrain(begin,end,'H1')
    for i in list(meta.keys()):
        print meta[i]
    #plt.figure()
    rel_time = np.arange(0,end-begin,meta['dt'])
    plt.plot(rel_time[:N],strain[:N],)
    plt.xlabel('Real Time(s)')
    plt.show()

import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import h5py

filename = 'H-H1_LOSC_4_V1-1126076416-4096.hdf5'
dataFile = h5py.File(filename,'r')

meta = dataFile['meta']
gpsStart = meta['GPSstart'].value
duration = meta['Duration'].value
gpsEnd = gpsStart + duration

strainC00 = dataFile['strain']['Strain'].value
ts = dataFile['strain']['Strain'].attrs['Xspacing']

time = np.arange(gpsStart,gpsEnd,ts)

numSamples = 1000

plt.plot(time[0:numSamples],strainC00[0:numSamples],color = 'b')
plt.xlabel('GPS Time(s)')
plt.ylabel('H1 strain , 4096Hz,GW170817')
plt.show()
ts = time[1] - time[0]
fs = int(1/ts)
length

starain_seg = strain[0:fs*length]

Pxx,freq = mlab.psd(strain_seg,NFFT = 2*fs,Fs = fs)
plt.plot(freq,Pxx)
plt.loglog([10,2000,1e-47,1e-38])
plt.xlabe('Frequency')
plt.ylabel('Noise Power Spectral Density')

